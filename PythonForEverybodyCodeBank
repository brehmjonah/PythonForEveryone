Assignment 1

1 Print Hello World

# the code below almost works
print("hello world")
---------------------------------------------------------------------------------------------------------------------------------------------------------
Assignment 2.2

2.2 Write a program that uses input to prompt a user for their name and then welcomes them. Note that input will pop up a dialog box. Enter Sarah in the
pop-up box when you are prompted so your output will match the desired output.

# The code below almost works

name = input("Enter your name")
print("Hello", name)
---------------------------------------------------------------------------------------------------------------------------------------------------------
Assignment 2.3

2.3 Write a program to prompt the user for hours and rate per hour using input to compute gross pay. Use 35 hours and a rate of 2.75 per hour to test the
program (the pay should be 96.25). You should use input to read a string and float() to convert the string to a number. Do not worry about error checking 
or bad user data.



# This first line is provided for you

hrs = input("Enter Hours:")
hrs_equation = int(hrs)

input_rate = input('Enter Rate:')

rate = float(input_rate)
pay = rate * hrs_equation
pay_equation = str(pay)

print('Pay:', pay_equation)
---------------------------------------------------------------------------------------------------------------------------------------------------------
Assignment 3.1

3.1 Write a program to prompt the user for hours and rate per hour using input to compute gross pay. Pay the hourly rate for the hours up to 40 and 
1.5 times the hourly rate for all hours worked above 40 hours. Use 45 hours and a rate of 10.50 per hour to test the program (the pay should be 498.75). 
You should use input to read a string and float() to convert the string to a number. Do not worry about error checking the user input - assume the user 
types numbers properly.



hrs = input("Enter Hours:")
h = float(hrs)
rate = input('Enter Rate:')
r = float(rate)

if h <= 40:
    pay = h * r
    print(pay)
else:
    reg_pay = 40 * r
    ot_pay = ((h - 40) * (1.5 * r))
    print(reg_pay + ot_pay)
---------------------------------------------------------------------------------------------------------------------------------------------------------
Assignment 3.3

3.3 Write a program to prompt for a score between 0.0 and 1.0. If the score is out of range, print an error. If the score is between 0.0 and 1.0, print
a grade using the following table:
Score Grade
>= 0.9 A
>= 0.8 B
>= 0.7 C
>= 0.6 D
< 0.6 F
If the user enters a value out of range, print a suitable error message and exit. For the test, enter a score of 0.85.



score = input("Enter Score: ")

int_score = float(score)

try:
    
    if int_score > 1 or int_score < 0:
        print('Error: Value not in Range')
    elif int_score >= 0.9:
        print('A')
    elif int_score >= 0.8:
        print('B')
    elif int_score >= 0.7:
        print('C')
    elif int_score >= 0.6:
        print('D')
    else:
        print('F')
except:
        print('Error: Value is of Invalid Type')
---------------------------------------------------------------------------------------------------------------------------------------------------------
Assignment 4.6

4.6 Write a program to prompt the user for hours and rate per hour using input to compute gross pay. Pay should be the normal rate for hours up to 40 and
time-and-a-half for the hourly rate for all hours worked above 40 hours. Put the logic to do the computation of pay in a function called computepay() and
use the function to do the computation. The function should return a value. Use 45 hours and a rate of 10.50 per hour to test the program (the pay should
be 498.75). You should use input to read a string and float() to convert the string to a number. Do not worry about error checking the user input unless 
you want to - you can assume the user types numbers properly. Do not name your variable sum or use the sum() function.



def computepay(h, r):
    if h <= 40:
        pay = h * r
    else:
        reg_pay = 40 * r
        ot_pay = ((h - 40) * (1.5 * r))
        pay = reg_pay + ot_pay
    return pay

hrs = input("Enter Hours:")
h = float(hrs)
rate = input('Enter Rate:')
r = float(rate)
p = computepay(h, r)
strp = str(p)
print("Pay", strp)

---------------------------------------------------------------------------------------------------------------------------------------------------------
Assignment 5.2

5.2 Write a program that repeatedly prompts a user for integer numbers until the user enters 'done'. Once 'done' is entered, print out the largest and 
smallest of the numbers. If the user enters anything other than a valid number catch it with a try/except and put out an appropriate message and ignore 
the number. Enter 7, 2, bob, 10, and 4 and match the output below.



largest = None
smallest = None

while True:
    input_num = input('Input Number')
    if input_num == 'done':
        break
    try:
        num = int(input_num)
    except:
        print('Invalid input')
        continue
    if largest == None:
        largest = num
    if smallest == None:
        smallest = num
    elif num > largest:
        largest = num
    elif num < smallest:
        smallest = num

print('Maximum is', largest)
print('Minimum is', smallest)
---------------------------------------------------------------------------------------------------------------------------------------------------------
Assignment 6.5 - Strings and Slicing

6.5 Write code using find() and string slicing (see section 6.10) to extract the number at the end of the line below. Convert the extracted value to a 
floating point number and print it out.



text = "X-DSPAM-Confidence:    0.8475"

pos = text.find('0')
num = float(text[pos:])
print(num)

---------------------------------------------------------------------------------------------------------------------------------------------------------
Assignment 7.1 - Opening a File

7.1 Write a program that prompts for a file name, then opens that file and reads through the file, and print the contents of the file in upper case. Use 
the file words.txt to produce the output below. You can download the sample data at http://www.py4e.com/code3/words.txt



fname = input('Enter file name:')
fhandle = open(fname)

for line in fhandle:
    sline = line.strip()
    upline = sline.upper()
    print(upline)
---------------------------------------------------------------------------------------------------------------------------------------------------------
Assignment 7.2 - Searching through a file

7.2 Write a program that prompts for a file name, then opens that file and reads through the file, looking for lines of the form:
X-DSPAM-Confidence:    0.8475
Count these lines and extract the floating point values from each of the lines and compute the average of those values and produce an output as shown 
below. Do not use the sum() function or a variable named sum in your solution.
You can download the sample data at http://www.py4e.com/code3/mbox-short.txt when you are testing below enter mbox-short.txt as the file name.



# Use the file name mbox-short.txt as the file name

fname = input('Enter File Name:')
fhandle = open(fname)

count = 0
run_tot = 0.0

for line in fhandle:
    if not 'X-DSPAM-Confidence:' in line:
        continue
        
    else:
        count = count + 1
        strip_line = line.rstrip()
        xpos = strip_line.find('X-DSPAM-Confidence:')
        str_num = strip_line[xpos + 20:]
        float_num = float(str_num)
        run_tot = run_tot + float_num

print('Average spam confidence:', run_tot/count)
---------------------------------------------------------------------------------------------------------------------------------------------------------
Assignment 8.4 - Line Splitting and Lists

8.4 Open the file romeo.txt and read it line by line. For each line, split the line into a list of words using the split() method. The program should 
build a list of words. For each word on each line check to see if the word is already in the list and if not append it to the list. When the program 
completes, sort and print the resulting words in python sort() order as shown in the desired output.
You can download the sample data at http://www.py4e.com/code3/romeo.txt



fname = input('Enter file name:')
fhandle = open(fname)
mylist = []

for line in (fhandle):
    new_list = line.split()
    mylist = mylist + new_list

#start_range = len(mylist) 
final_list = []

for word in range((len(mylist))):
    keyword = mylist[word]
    count = final_list.count(keyword)
    if count == 0:
        final_list.append(keyword)


    
    
final_list.sort()
print(final_list)
---------------------------------------------------------------------------------------------------------------------------------------------------------
Assignment 8.5 - String Parsing and Lists

8.5 Open the file mbox-short.txt and read it line by line. When you find a line that starts with 'From ' like the following line:
From stephen.marquard@uct.ac.za Sat Jan  5 09:14:16 2008
You will parse the From line using split() and print out the second word in the line (i.e. the entire address of the person who sent the message). 
Then print out a count at the end.
Hint: make sure not to include the lines that start with 'From:'. Also look at the last line of the sample output to see how to print the count.
You can download the sample data at http://www.py4e.com/code3/mbox-short.txt



fname = input('Enter File Name:')
fhandle = open(fname)
count = 0
tot_list = []

for line in fhandle:
    if 'From' in line:

        mylist = line.split()
        address = mylist[1]
        num = tot_list.count(address)
        if num < 1:
            tot_list.append(address)
            count = count + 1
            print(address)
              
print('There were', count, 'lines in the file with From as the first word')
---------------------------------------------------------------------------------------------------------------------------------------------------------
Assignment 9.4 - Dictionaries (Dict)

9.4 Write a program to read through the mbox-short.txt and figure out who has sent the greatest number of mail messages. The program looks for 'From ' 
lines and takes the second word of those lines as the person who sent the mail. The program creates a Python dictionary that maps the sender's mail 
address to a count of the number of times they appear in the file. After the dictionary is produced, the program reads through the dictionary using 
a maximum loop to find the most prolific committer.



fname = input('Enter File Name:')
if fname != 'mbox-short.txt':
    fname = 'mbox-short.txt'
fhandle = open(fname)
email_dict = {}

name_list = []

for line in fhandle:
    if 'From ' in line:     
        mylist = line.split()
        name_list.append(mylist[1])
        
for word in name_list:
    email_dict[word] = email_dict.get(word, 0) + 1

finalcount = 0
finalword = None

for key in email_dict:
    if email_dict[key] > finalcount:
        finalcount = email_dict[key]
        finalword = key
        
print(finalword, finalcount)
---------------------------------------------------------------------------------------------------------------------------------------------------------
Assignment 10.2 - Tuples and Dictionaries

10.2 Write a program to read through the mbox-short.txt and figure out the distribution by hour of the day for each of the messages. You can pull the 
hour out from the 'From ' line by finding the time and then splitting the string a second time using a colon.
From stephen.marquard@uct.ac.za Sat Jan  5 09:14:16 2008
Once you have accumulated the counts for each hour, print out the counts, sorted by hour as shown below.



fname = input('Enter File Name:')
if fname != 'mbox-short.txt':
    fname = 'mbox-short.txt'
fhandle = open(fname)

hourlist = []
hourdict = {}

for line in fhandle:
    if 'From ' in line:      
        mylist = line.split()
        mytime = mylist[5]
        second_list = mytime.split(':')
        myhour = second_list[0]
        hourlist.append(myhour)
        
for hour in hourlist:
    hourdict[hour] = hourdict.get(hour, 0) + 1

totlist = []

for key, value in hourdict.items():
    totlist.append((key, value))
    
totlist = sorted(totlist)

for key, value in totlist:
    print(key, value)
---------------------------------------------------------------------------------------------------------------------------------------------------------
Regular Expressions

Finding Numbers in a Haystack

In this assignment you will read through and parse a file with text and numbers. You will extract all the numbers in the file and compute the sum of the 
numbers.

Data Files
We provide two files for this assignment. One is a sample file where we give you the sum for your testing and the other is the actual data you need 
to process for the assignment.

Sample data: http://py4e-data.dr-chuck.net/regex_sum_42.txt (There are 90 values with a sum=445833)
Actual data: http://py4e-data.dr-chuck.net/regex_sum_2009268.txt (There are 77 values and the sum ends with 57)
These links open in a new window. Make sure to save the file into the same folder as you will be writing your Python program. Note: Each student 
will have a distinct data file for the assignment - so only use your own data file for analysis.
Data Format
The file contains much of the text from the introduction of the textbook except that random numbers are inserted throughout the text. Here is a 
sample of the output you might see:




import re

# # fname = input('Enter File Name ')
# # if fname != 'Regexsample':
# #     fname = 'Regexsample'

# #SUBLIME DOES NOT ALLOW INPUT OR AT LEAST I COULDN'T FIGURE OUT HOW

# runtot = []


# fhandle = open('data11.txt')


# for line in fhandle:
#     nums = re.findall('[0-9]+', line)
#     if len(nums) == 0:
#         continue
#     else:
#         for num in range(len(nums)):
#             runtot.append(nums[num])

# sum = 0


# for num in range(len(runtot)):
#     intnum = int(runtot[num])
#     sum = sum + intnum


# print(sum)

print( sum( [ int(i) for i in re.findall('[0-9]+',open('data11.txt').read()) ] ) )

# my = [1, 3, 5]

# print(sum(my))
---------------------------------------------------------------------------------------------------------------------------------------------------------
Exploring the HyperText Transport Protocol - Sockets

You are to retrieve the following document using the HTTP protocol in a way that you can examine the HTTP Response headers.

http://data.pr4e.org/intro-short.txt
There are three ways that you might retrieve this web page and look at the response headers:

Preferred: Modify the socket1.py program to retrieve the above URL and print out the headers and data. Make sure to change the code to retrieve the 
above URL - the values are different for each URL.
Open the URL in a web browser with a developer console or FireBug and manually examine the headers that are returned.
Enter the header values in each of the fields below and press "Submit".




import socket

mysock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
mysock.connect(('data.pr4e.org', 80))
cmd = 'GET http://data.pr4e.org/intro-short.txt HTTP/1.0\r\n\r\n'.encode()
mysock.send(cmd)

while True:
    data = mysock.recv(512)
    if len(data) < 1:
        break
    print(data.decode(),end='')

mysock.close()

---------------------------------------------------------------------------------------------------------------------------------------------------------
Webscraping - HTML



# To run this, download the BeautifulSoup zip file
# http://www.py4e.com/code3/bs4.zip
# and unzip it in the same directory as this file

import urllib.request, urllib.parse, urllib.error
from bs4 import BeautifulSoup
import ssl
import re

# Ignore SSL certificate errors
ctx = ssl.create_default_context()
ctx.check_hostname = False
ctx.verify_mode = ssl.CERT_NONE

url = 'http://py4e-data.dr-chuck.net/known_by_Butali.html'
html = urllib.request.urlopen(url, context=ctx).read()
soup = BeautifulSoup(html, 'html.parser')

# Retrieve all of the anchor tags
tags = soup('a')



for i in range(7):
    line3 = str(tags[17])
    # print(line3)
    link = re.findall('href="(.+?)"', line3)
    # print(link)
    strlink = str(link[0])
    # print(strlink)
    # print(type(strlink))
    ctx = ssl.create_default_context()
    ctx.check_hostname = False
    ctx.verify_mode = ssl.CERT_NONE

    url = strlink
    html = urllib.request.urlopen(url, context=ctx).read()
    soup = BeautifulSoup(html, 'html.parser')
    tags = soup('a')

print(link[0])

---------------------------------------------------------------------------------------------------------------------------------------------------------
Assignment13 - XML Parsing




import urllib.request, urllib.parse, urllib.error
import xml.etree.ElementTree as ET
import ssl

# api_key = False
# If you have a Google Places API key, enter it here
# api_key = 'AIzaSy___IDByT70'
# https://developers.google.com/maps/documentation/geocoding/intro

# if api_key is False:
#     api_key = 42
#     serviceurl = 'http://py4e-data.dr-chuck.net/xml?'
# else :
#     serviceurl = 'https://maps.googleapis.com/maps/api/geocode/xml?'

# Ignore SSL certificate errors
ctx = ssl.create_default_context()
ctx.check_hostname = False
ctx.verify_mode = ssl.CERT_NONE

# while True:
address = 'http://py4e-data.dr-chuck.net/comments_2009272.xml'
    # address = input('Enter location: ')
    # if len(address) < 1: break

    # parms = dict()
    # parms['address'] = address
    # if api_key is not False: parms['key'] = api_key
    # url = serviceurl + urllib.parse.urlencode(parms)
print('Retrieving', address)
uh = urllib.request.urlopen(address, context=ctx)

data = uh.read()
print('Retrieved', len(data), 'characters')
print(data.decode())

tree = ET.fromstring(data)

stuff = tree.findall('.//comment')
countlist = []
for count in stuff:
    countlist.append(int(count.find('count').text))

sum = 0
for num in range(len(countlist)):
    sum = sum + countlist[num]

print(sum)

    # results = tree.findall('result')
    # lat = results[0].find('geometry').find('location').find('lat').text
    # lng = results[0].find('geometry').find('location').find('lng').text
    # location = results[0].find('formatted_address').text

    # print('lat', lat, 'lng', lng)
    # print(location)

---------------------------------------------------------------------------------------------------------------------------------------------------------
Assignment13 - JSON Parsing



import urllib.request, urllib.parse, urllib.error
import json
import ssl

api_key = False
# If you have a Google Places API key, enter it here
# api_key = 'AIzaSy___IDByT70'
# https://developers.google.com/maps/documentation/geocoding/intro

# Ignore SSL certificate errors
ctx = ssl.create_default_context()
ctx.check_hostname = False
ctx.verify_mode = ssl.CERT_NONE


address = 'http://py4e-data.dr-chuck.net/comments_2009273.json'

uh = urllib.request.urlopen(address, context=ctx)

data = uh.read().decode()
mydata = json.loads(data)
mylist = mydata['comments']
runningtot = []
count = 0
totsum = 0

for item in mylist:
    if item['count'] != None:
        count = count + 1
        totsum = totsum + int(item['count'])
    else:
        continue
print(count)
print(totsum)
print(type(mydata))
# results = tree.findall('result')
# lat = results[0].find('geometry').find('location').find('lat').text







import urllib.request, urllib.parse
import json, ssl

# Heavily rate limited proxy of https://www.geoapify.com/ api
serviceurl = 'https://py4e-data.dr-chuck.net/opengeo?'

# Ignore SSL certificate errors
ctx = ssl.create_default_context()
ctx.check_hostname = False
ctx.verify_mode = ssl.CERT_NONE


address = 'University of Notre Dame'

address = address.strip()
parms = dict()
parms['q'] = address

url = serviceurl + urllib.parse.urlencode(parms)

print('Retrieving', url)
uh = urllib.request.urlopen(url, context=ctx)
data = uh.read().decode()
# print('Retrieved', len(data), 'characters', data[:20].replace('/n', ' '))

---------------------------------------------------------------------------------------------------------------------------------------------------------
Class Example:


class PartyAnimal:
    def __init__(self):
        self.x = 0

    def party(self):
        self.x = self.x + 1
        print("So far ", self.x)

an = PartyAnimal()

an.party()

print(an.x)

exlist = ('String')
print(exlist)
# print(an.x)
# print(an.x)
---------------------------------------------------------------------------------------------------------------------------------------------------------
Assignment 15: Counting Emails with a Database




import sqlite3

conn = sqlite3.connect('emaildb.sqlite')
cur = conn.cursor()

cur.execute('DROP TABLE IF EXISTS Counts')

cur.execute('''
CREATE TABLE Counts (org TEXT, count INTEGER)''')

fname = 'mbox.txt'
# if (len(fname) < 1): fname = 'mbox-short.txt'
fh = open(fname)
for line in fh:
    if not line.startswith('From: '): continue
    pieces = line.split()
    email = pieces[1]
    email_domain = email.split('@')
    domain = email_domain[1]
    cur.execute('SELECT count FROM Counts WHERE org = ? ', (domain,))
    row = cur.fetchone()
    if row is None:
        cur.execute('''INSERT INTO Counts (org, count)
                VALUES (?, 1)''', (domain,))
    else:
        cur.execute('UPDATE Counts SET count = count + 1 WHERE org = ?',
                    (domain,))
    # conn.commit()
conn.commit()

# https://www.sqlite.org/lang_select.html
sqlstr = 'SELECT org, count FROM Counts ORDER BY count DESC LIMIT 10'

for row in cur.execute(sqlstr):
    print(str(row[0]), row[1])

cur.close()

---------------------------------------------------------------------------------------------------------------------------------------------------------
Assignment 15: One to Many Relationship




import sqlite3

conn = sqlite3.connect('trackdb.sqlite')
cur = conn.cursor()

# Make some fresh tables using executescript()
cur.executescript('''
DROP TABLE IF EXISTS Artist;
DROP TABLE IF EXISTS Album;
DROP TABLE IF EXISTS Track;
DROP TABLE IF EXISTS Genre;

CREATE TABLE Artist (
    id  INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT UNIQUE,
    name    TEXT UNIQUE
);

CREATE TABLE Genre (
    id  INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT UNIQUE,
    name    TEXT UNIQUE
);

CREATE TABLE Album (
    id  INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT UNIQUE,
    artist_id  INTEGER,
    title   TEXT UNIQUE
);

CREATE TABLE Track (
    id  INTEGER NOT NULL PRIMARY KEY
        AUTOINCREMENT UNIQUE,
    title TEXT  UNIQUE,
    album_id  INTEGER,
    genre_id  INTEGER,
    len INTEGER, rating INTEGER, count INTEGER
);
-- CREATE TABLE Artist (
--     id  INTEGER PRIMARY KEY,
--     name    TEXT UNIQUE
-- );

-- CREATE TABLE Album (
--     id  INTEGER PRIMARY KEY,
--     artist_id  INTEGER,
--     title   TEXT UNIQUE
-- );

-- CREATE TABLE Track (
--     id  INTEGER PRIMARY KEY,
--     title TEXT  UNIQUE,
--     album_id  INTEGER,
--     len INTEGER, rating INTEGER, count INTEGER
-- );
-- ''')



handle = open('tracks.csv')

# Another One Bites The Dust,Queen,Greatest Hits,55,100,217103
#   0                          1      2           3  4   5

for line in handle:
    line = line.strip();
    pieces = line.split(',')
    if len(pieces) < 6 : continue

    name = pieces[0]
    artist = pieces[1]
    album = pieces[2]
    count = pieces[3]
    rating = pieces[4]
    length = pieces[5]
    genre = pieces[6]

    print(name, artist, album, count, rating, length, genre)

    cur.execute('''INSERT OR IGNORE INTO Artist (name) 
        VALUES ( ? )''', ( artist, ) )
    cur.execute('SELECT id FROM Artist WHERE name = ? ', (artist, ))
    artist_id = cur.fetchone()[0]

    cur.execute('''INSERT OR IGNORE INTO Album (title, artist_id) 
        VALUES ( ?, ? )''', ( album, artist_id ) )
    cur.execute('SELECT id FROM Album WHERE title = ? ', (album, ))
    album_id = cur.fetchone()[0]


    cur.execute('''INSERT OR IGNORE INTO Genre (name)
        VALUES ( ? )''', ( genre, ) )
    cur.execute('SELECT id FROM Genre WHERE name = ? ', (genre, ))
    genre_id = cur.fetchone()[0]

    cur.execute('''INSERT OR REPLACE INTO Track
        (title, album_id, len, rating, count, genre_id)
        VALUES ( ?, ?, ?, ?, ?, ?)''',
        ( name, album_id, length, rating, count, genre_id) )

    conn.commit()

---------------------------------------------------------------------------------------------------------------------------------------------------------
Assignment 15: Many To Many Relationships




import json
import sqlite3

conn = sqlite3.connect('rosterdb.sqlite')
cur = conn.cursor()

# Do some setup
cur.executescript('''
DROP TABLE IF EXISTS User;
DROP TABLE IF EXISTS Member;
DROP TABLE IF EXISTS Course;

CREATE TABLE User (
    id     INTEGER PRIMARY KEY,
    name   TEXT UNIQUE
);

CREATE TABLE Course (
    id     INTEGER PRIMARY KEY,
    title  TEXT UNIQUE
);

CREATE TABLE Member (
    user_id     INTEGER,
    course_id   INTEGER,
    role        INTEGER,
    PRIMARY KEY (user_id, course_id)
)
''')

# fname = input('Enter file name: ')
# if len(fname) < 1:
fname = 'roster_data.json'

#   [ "Charley", "si110", 1 ],
#   [ "Mea", "si110", 0 ],

str_data = open(fname).read()
json_data = json.loads(str_data)

for entry in json_data:

    print(entry)
    name = entry[0]
    title = entry[1]
    role = entry[2]

    print((name, title, role))

    cur.execute('''INSERT OR IGNORE INTO User (name)
        VALUES ( ? )''', ( name, ) )
    cur.execute('SELECT id FROM User WHERE name = ? ', (name, ))
    user_id = cur.fetchone()[0]

    cur.execute('''INSERT OR IGNORE INTO Course (title)
        VALUES ( ? )''', ( title, ) )
    cur.execute('SELECT id FROM Course WHERE title = ? ', (title, ))
    course_id = cur.fetchone()[0]

    cur.execute('''INSERT OR REPLACE INTO Member
        (user_id, course_id, role) VALUES ( ?, ?, ? )''',
        ( user_id, course_id, role ) )

    conn.commit()
---------------------------------------------------------------------------------------------------------------------------------------------------------
Assignment 16 - GEOCODING



import urllib.request, urllib.parse, urllib.error
import http
import sqlite3
import json
import time
import ssl
import sys

# https://py4e-data.dr-chuck.net/opengeo?q=Ann+Arbor%2C+MI
serviceurl = 'https://py4e-data.dr-chuck.net/opengeo?'

# Additional detail for urllib
# http.client.HTTPConnection.debuglevel = 1

conn = sqlite3.connect('opengeo.sqlite')
cur = conn.cursor()

cur.execute('''
CREATE TABLE IF NOT EXISTS Locations (address TEXT, geodata TEXT)''')

# Ignore SSL certificate errors
ctx = ssl.create_default_context()
ctx.check_hostname = False
ctx.verify_mode = ssl.CERT_NONE

fh = open("where.data")
count = 0
nofound = 0
for line in fh:
    if count > 100 :
        print('Retrieved 100 locations, restart to retrieve more')
        break

    address = line.strip()
    print('')
    cur.execute("SELECT geodata FROM Locations WHERE address= ?",
        (memoryview(address.encode()), ))

    try:
        data = cur.fetchone()[0]
        print("Found in database", address)
        continue
    except:
        pass

    parms = dict()
    parms['q'] = address

    url = serviceurl + urllib.parse.urlencode(parms)

    print('Retrieving', url)
    uh = urllib.request.urlopen(url, context=ctx)
    data = uh.read().decode()
    print('Retrieved', len(data), 'characters', data[:20].replace('\n', ' '))
    count = count + 1

    try:
        js = json.loads(data)
    except:
        print(data)  # We print in case unicode causes an error
        continue

    if not js or 'features' not in js:
        print('==== Download error ===')
        print(data)
        break

    if len(js['features']) == 0:
        print('==== Object not found ====')
        nofound = nofound + 1

    cur.execute('''INSERT INTO Locations (address, geodata)
        VALUES ( ?, ? )''',
        (memoryview(address.encode()), memoryview(data.encode()) ) )

    conn.commit()

    if count % 10 == 0 :
        print('Pausing for a bit...')
        time.sleep(5)

if nofound > 0:
    print('Number of features for which the location could not be found:', nofound)

print("Run geodump.py to read the data from the database so you can vizualize it on a map.")


GEODUMP


import sqlite3
import json
import codecs

conn = sqlite3.connect('opengeo.sqlite')
cur = conn.cursor()

cur.execute('SELECT * FROM Locations')
fhand = codecs.open('where.js', 'w', "utf-8")
fhand.write("myData = [\n")
count = 0
for row in cur :
    data = str(row[1].decode())
    try: js = json.loads(str(data))
    except: continue

    if len(js['features']) == 0: continue

    try:
        lat = js['features'][0]['geometry']['coordinates'][1]
        lng = js['features'][0]['geometry']['coordinates'][0]
        where = js['features'][0]['properties']['display_name']
        where = where.replace("'", "")
    except:
        print('Unexpected format')
        print(js)

    try :
        print(where, lat, lng)

        count = count + 1
        if count > 1 : fhand.write(",\n")
        output = "["+str(lat)+","+str(lng)+", '"+where+"']"
        fhand.write(output)
    except:
        continue

fhand.write("\n];\n")
cur.close()
fhand.close()
print(count, "records written to where.js")
print("Open where.html to view the data in a browser")
---------------------------------------------------------------------------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------------------------------------------------------------------------

---------------------------------------------------------------------------------------------------------------------------------------------------------

---------------------------------------------------------------------------------------------------------------------------------------------------------

---------------------------------------------------------------------------------------------------------------------------------------------------------
